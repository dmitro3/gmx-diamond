/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  Vesting,
  VestingInterface,
} from "../../../contracts/facetsExternal/Vesting";

const _abi = [
  {
    inputs: [],
    name: "Address_Cannot_Be_Zero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Address_Is_A_Contract",
    type: "error",
  },
  {
    inputs: [],
    name: "Claim_Not_Started",
    type: "error",
  },
  {
    inputs: [],
    name: "Insufficient_Balance",
    type: "error",
  },
  {
    inputs: [],
    name: "Invalid_Action",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuard__ReentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "User_Not_Expired",
    type: "error",
  },
  {
    inputs: [],
    name: "User_Refunded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "HANDLE_CLAIM",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "HANDLE_INIT_VESTING",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "HANDLE_REFUND",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "HANDLE_SET_REFUND",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "HANDLE_WITHDRAWN_AMOUNT",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "calculateClaim",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getUser",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isExist",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "userRefunded",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "userAllowedTokenID",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "userRefundedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "userWithdrawnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "userReceivedAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "userAddress",
            type: "address",
          },
        ],
        internalType: "struct TVestingUser",
        name: "user",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVesting",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isRefundable",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isRefund",
            type: "bool",
          },
          {
            internalType: "enum ItemType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "projectID",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "refundEndTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "claimStartTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "remainingTokens",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "claimedTokens",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "refundedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "vestingPeriod",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "periodClaim",
            type: "uint256[]",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "refundedUsers",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "userList",
            type: "address[]",
          },
        ],
        internalType: "struct TVesting",
        name: "vesting",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isExist",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "userRefunded",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "userAllowedTokenID",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "userRefundedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "userWithdrawnAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "userReceivedAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "userAddress",
            type: "address",
          },
        ],
        internalType: "struct TVestingUser[]",
        name: "_users",
        type: "tuple[]",
      },
    ],
    name: "initUsers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isRefundable",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isRefund",
            type: "bool",
          },
          {
            internalType: "enum ItemType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "projectID",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "refundEndTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "claimStartTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "remainingTokens",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "claimedTokens",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "refundedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "vestingPeriod",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "periodClaim",
            type: "uint256[]",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "refundedUsers",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "userList",
            type: "address[]",
          },
        ],
        internalType: "struct TVesting",
        name: "_params",
        type: "tuple",
      },
    ],
    name: "initVesting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class Vesting__factory {
  static readonly abi = _abi;
  static createInterface(): VestingInterface {
    return new utils.Interface(_abi) as VestingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Vesting {
    return new Contract(address, _abi, signerOrProvider) as Vesting;
  }
}
