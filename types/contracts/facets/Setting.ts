/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TDetailsStruct = {
  slug: PromiseOrValue<string>;
  projectName: PromiseOrValue<string>;
  tokenName: PromiseOrValue<string>;
  tokenSymbol: PromiseOrValue<string>;
  chainName: PromiseOrValue<string>;
  developer: PromiseOrValue<string>;
  status: PromiseOrValue<string>;
  description: PromiseOrValue<string>;
  announcement: PromiseOrValue<string>;
  listing: PromiseOrValue<string>;
  image: PromiseOrValue<string>;
  backgroundImage: PromiseOrValue<string>;
  genre: PromiseOrValue<string>[];
  platforms: PromiseOrValue<string>[];
};

export type TDetailsStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string[],
  string[]
] & {
  slug: string;
  projectName: string;
  tokenName: string;
  tokenSymbol: string;
  chainName: string;
  developer: string;
  status: string;
  description: string;
  announcement: string;
  listing: string;
  image: string;
  backgroundImage: string;
  genre: string[];
  platforms: string[];
};

export type TSocialsStruct = {
  web: PromiseOrValue<string>;
  twitter: PromiseOrValue<string>;
  medium: PromiseOrValue<string>;
  discord: PromiseOrValue<string>;
};

export type TSocialsStructOutput = [string, string, string, string] & {
  web: string;
  twitter: string;
  medium: string;
  discord: string;
};

export type TLaunchpadStruct = {
  isExist: PromiseOrValue<boolean>;
  isUpcoming: PromiseOrValue<boolean>;
  isRefundable: PromiseOrValue<boolean>;
  isVesting: PromiseOrValue<boolean>;
  isNFT: PromiseOrValue<boolean>;
  details: TDetailsStruct;
  socials: TSocialsStruct;
  projectID: PromiseOrValue<BigNumberish>;
  chainID: PromiseOrValue<BigNumberish>;
  tokenPrice: PromiseOrValue<BigNumberish>;
  fee: PromiseOrValue<BigNumberish>;
  userCount: PromiseOrValue<BigNumberish>;
  collectedValue: PromiseOrValue<BigNumberish>;
  tokensToBeSold: PromiseOrValue<BigNumberish>;
  soldTokens: PromiseOrValue<BigNumberish>;
  sharePerUser: PromiseOrValue<BigNumberish>;
  poolScore: PromiseOrValue<BigNumberish>;
  minDepositAmount: PromiseOrValue<BigNumberish>;
  maxDepositAmount: PromiseOrValue<BigNumberish>;
  registerStart: PromiseOrValue<BigNumberish>;
  registerEnd: PromiseOrValue<BigNumberish>;
  privateDepositStart: PromiseOrValue<BigNumberish>;
  privateDepositEnd: PromiseOrValue<BigNumberish>;
  publicDepositStart: PromiseOrValue<BigNumberish>;
  publicDepositEnd: PromiseOrValue<BigNumberish>;
  claimStart: PromiseOrValue<BigNumberish>;
  tokenAddress: PromiseOrValue<string>;
  usedTokenAddress: PromiseOrValue<string>;
  vestingContract: PromiseOrValue<string>;
  users: PromiseOrValue<string>[];
};

export type TLaunchpadStructOutput = [
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  TDetailsStructOutput,
  TSocialsStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string[]
] & {
  isExist: boolean;
  isUpcoming: boolean;
  isRefundable: boolean;
  isVesting: boolean;
  isNFT: boolean;
  details: TDetailsStructOutput;
  socials: TSocialsStructOutput;
  projectID: BigNumber;
  chainID: BigNumber;
  tokenPrice: BigNumber;
  fee: BigNumber;
  userCount: BigNumber;
  collectedValue: BigNumber;
  tokensToBeSold: BigNumber;
  soldTokens: BigNumber;
  sharePerUser: BigNumber;
  poolScore: BigNumber;
  minDepositAmount: BigNumber;
  maxDepositAmount: BigNumber;
  registerStart: BigNumber;
  registerEnd: BigNumber;
  privateDepositStart: BigNumber;
  privateDepositEnd: BigNumber;
  publicDepositStart: BigNumber;
  publicDepositEnd: BigNumber;
  claimStart: BigNumber;
  tokenAddress: string;
  usedTokenAddress: string;
  vestingContract: string;
  users: string[];
};

export interface SettingInterface extends utils.Interface {
  functions: {
    "addAmounts(uint256[],uint256[])": FunctionFragment;
    "addTimes(uint256[],uint256[])": FunctionFragment;
    "initLaunchpad((bool,bool,bool,bool,bool,(string,string,string,string,string,string,string,string,string,string,string,string,string[],string[]),(string,string,string,string),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,address[]))": FunctionFragment;
    "setLaunchpad((bool,bool,bool,bool,bool,(string,string,string,string,string,string,string,string,string,string,string,string,string[],string[]),(string,string,string,string),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,address[]))": FunctionFragment;
    "setPoolActive(bool)": FunctionFragment;
    "setToken0(address)": FunctionFragment;
    "setToken1(address)": FunctionFragment;
    "setTokenAddress(uint256,address)": FunctionFragment;
    "setUsedTokenAddress(uint256,address)": FunctionFragment;
    "setVestingContract(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAmounts"
      | "addTimes"
      | "initLaunchpad"
      | "setLaunchpad"
      | "setPoolActive"
      | "setToken0"
      | "setToken1"
      | "setTokenAddress"
      | "setUsedTokenAddress"
      | "setVestingContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAmounts",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addTimes",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initLaunchpad",
    values: [TLaunchpadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setLaunchpad",
    values: [TLaunchpadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolActive",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken0",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken1",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsedTokenAddress",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingContract",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addAmounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTimes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initLaunchpad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLaunchpad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsedTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingContract",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Setting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SettingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAmounts(
      _amounts: PromiseOrValue<BigNumberish>[],
      _multipliers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTimes(
      _times: PromiseOrValue<BigNumberish>[],
      _multipliers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initLaunchpad(
      _params: TLaunchpadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLaunchpad(
      _params: TLaunchpadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolActive(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken0(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken1(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenAddress(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUsedTokenAddress(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVestingContract(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAmounts(
    _amounts: PromiseOrValue<BigNumberish>[],
    _multipliers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTimes(
    _times: PromiseOrValue<BigNumberish>[],
    _multipliers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initLaunchpad(
    _params: TLaunchpadStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLaunchpad(
    _params: TLaunchpadStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolActive(
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken0(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken1(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenAddress(
    _id: PromiseOrValue<BigNumberish>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUsedTokenAddress(
    _id: PromiseOrValue<BigNumberish>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVestingContract(
    _id: PromiseOrValue<BigNumberish>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAmounts(
      _amounts: PromiseOrValue<BigNumberish>[],
      _multipliers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addTimes(
      _times: PromiseOrValue<BigNumberish>[],
      _multipliers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    initLaunchpad(
      _params: TLaunchpadStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setLaunchpad(
      _params: TLaunchpadStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolActive(
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken0(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken1(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAddress(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsedTokenAddress(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingContract(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addAmounts(
      _amounts: PromiseOrValue<BigNumberish>[],
      _multipliers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTimes(
      _times: PromiseOrValue<BigNumberish>[],
      _multipliers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initLaunchpad(
      _params: TLaunchpadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLaunchpad(
      _params: TLaunchpadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolActive(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken0(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken1(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenAddress(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUsedTokenAddress(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVestingContract(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAmounts(
      _amounts: PromiseOrValue<BigNumberish>[],
      _multipliers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTimes(
      _times: PromiseOrValue<BigNumberish>[],
      _multipliers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initLaunchpad(
      _params: TLaunchpadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLaunchpad(
      _params: TLaunchpadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolActive(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken0(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken1(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAddress(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUsedTokenAddress(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVestingContract(
      _id: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
