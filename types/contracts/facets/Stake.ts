/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface StakeInterface extends utils.Interface {
  functions: {
    "addToken0Liquidity(uint256)": FunctionFragment;
    "addToken1Liquidity(uint256)": FunctionFragment;
    "calculateRewards(address)": FunctionFragment;
    "calculateScore(uint256,uint256)": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "stake(uint256,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawRequest(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addToken0Liquidity"
      | "addToken1Liquidity"
      | "calculateRewards"
      | "calculateScore"
      | "claimRewards"
      | "stake"
      | "withdraw"
      | "withdrawRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToken0Liquidity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken1Liquidity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateScore",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToken0Liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToken1Liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequest",
    data: BytesLike
  ): Result;

  events: {
    "FORCED_HARVEST(address,address,uint256)": EventFragment;
    "HANDLE_ADD_LIQUIDITY(address,address,uint256)": EventFragment;
    "HANDLE_HARVEST(address,address,uint256)": EventFragment;
    "HANDLE_REQUEST(address,address,uint256)": EventFragment;
    "HANDLE_STAKE(address,address,uint256)": EventFragment;
    "HANDLE_UNSTAKE(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FORCED_HARVEST"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_ADD_LIQUIDITY"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_HARVEST"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_REQUEST"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_STAKE"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_UNSTAKE"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface FORCED_HARVESTEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type FORCED_HARVESTEvent = TypedEvent<
  [string, string, BigNumber],
  FORCED_HARVESTEventObject
>;

export type FORCED_HARVESTEventFilter = TypedEventFilter<FORCED_HARVESTEvent>;

export interface HANDLE_ADD_LIQUIDITYEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type HANDLE_ADD_LIQUIDITYEvent = TypedEvent<
  [string, string, BigNumber],
  HANDLE_ADD_LIQUIDITYEventObject
>;

export type HANDLE_ADD_LIQUIDITYEventFilter =
  TypedEventFilter<HANDLE_ADD_LIQUIDITYEvent>;

export interface HANDLE_HARVESTEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type HANDLE_HARVESTEvent = TypedEvent<
  [string, string, BigNumber],
  HANDLE_HARVESTEventObject
>;

export type HANDLE_HARVESTEventFilter = TypedEventFilter<HANDLE_HARVESTEvent>;

export interface HANDLE_REQUESTEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type HANDLE_REQUESTEvent = TypedEvent<
  [string, string, BigNumber],
  HANDLE_REQUESTEventObject
>;

export type HANDLE_REQUESTEventFilter = TypedEventFilter<HANDLE_REQUESTEvent>;

export interface HANDLE_STAKEEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type HANDLE_STAKEEvent = TypedEvent<
  [string, string, BigNumber],
  HANDLE_STAKEEventObject
>;

export type HANDLE_STAKEEventFilter = TypedEventFilter<HANDLE_STAKEEvent>;

export interface HANDLE_UNSTAKEEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type HANDLE_UNSTAKEEvent = TypedEvent<
  [string, string, BigNumber],
  HANDLE_UNSTAKEEventObject
>;

export type HANDLE_UNSTAKEEventFilter = TypedEventFilter<HANDLE_UNSTAKEEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Stake extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToken0Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToken1Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calculateScore(
      _amount: PromiseOrValue<BigNumberish>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { score: BigNumber; multipler: BigNumber }
    >;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addToken0Liquidity(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToken1Liquidity(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateRewards(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  calculateScore(
    _amount: PromiseOrValue<BigNumberish>,
    _time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { score: BigNumber; multipler: BigNumber }
  >;

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amount: PromiseOrValue<BigNumberish>,
    _lockTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawRequest(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToken0Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken1Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calculateScore(
      _amount: PromiseOrValue<BigNumberish>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { score: BigNumber; multipler: BigNumber }
    >;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FORCED_HARVEST(address,address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): FORCED_HARVESTEventFilter;
    FORCED_HARVEST(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): FORCED_HARVESTEventFilter;

    "HANDLE_ADD_LIQUIDITY(address,address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_ADD_LIQUIDITYEventFilter;
    HANDLE_ADD_LIQUIDITY(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_ADD_LIQUIDITYEventFilter;

    "HANDLE_HARVEST(address,address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_HARVESTEventFilter;
    HANDLE_HARVEST(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_HARVESTEventFilter;

    "HANDLE_REQUEST(address,address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_REQUESTEventFilter;
    HANDLE_REQUEST(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_REQUESTEventFilter;

    "HANDLE_STAKE(address,address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_STAKEEventFilter;
    HANDLE_STAKE(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_STAKEEventFilter;

    "HANDLE_UNSTAKE(address,address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_UNSTAKEEventFilter;
    HANDLE_UNSTAKE(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_UNSTAKEEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addToken0Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToken1Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateScore(
      _amount: PromiseOrValue<BigNumberish>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToken0Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToken1Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateScore(
      _amount: PromiseOrValue<BigNumberish>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
