/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TStakePoolInfoStruct = {
  isActive: PromiseOrValue<boolean>;
  lastCHCIndex: PromiseOrValue<BigNumberish>;
  numberOfStakers: PromiseOrValue<BigNumberish>;
  totalStakedToken: PromiseOrValue<BigNumberish>;
  poolTotalScore: PromiseOrValue<BigNumberish>;
  poolToken0RewardPerTime: PromiseOrValue<BigNumberish>;
  poolDistributedToken0Reward: PromiseOrValue<BigNumberish>;
  poolToken0DistributionEndTime: PromiseOrValue<BigNumberish>;
  poolToken0Liquidity: PromiseOrValue<BigNumberish>;
  poolToken1RewardPerTime: PromiseOrValue<BigNumberish>;
  poolDistributedToken1Reward: PromiseOrValue<BigNumberish>;
  poolToken1DistributionEndTime: PromiseOrValue<BigNumberish>;
  poolToken1Liquidity: PromiseOrValue<BigNumberish>;
  token0: PromiseOrValue<string>;
  token1: PromiseOrValue<string>;
};

export type TStakePoolInfoStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  isActive: boolean;
  lastCHCIndex: BigNumber;
  numberOfStakers: BigNumber;
  totalStakedToken: BigNumber;
  poolTotalScore: BigNumber;
  poolToken0RewardPerTime: BigNumber;
  poolDistributedToken0Reward: BigNumber;
  poolToken0DistributionEndTime: BigNumber;
  poolToken0Liquidity: BigNumber;
  poolToken1RewardPerTime: BigNumber;
  poolDistributedToken1Reward: BigNumber;
  poolToken1DistributionEndTime: BigNumber;
  poolToken1Liquidity: BigNumber;
  token0: string;
  token1: string;
};

export type TUserStruct = {
  staker: PromiseOrValue<boolean>;
  userChangeCountIndex: PromiseOrValue<BigNumberish>;
  userTotalStakeAmount: PromiseOrValue<BigNumberish>;
  userTotalScore: PromiseOrValue<BigNumberish>;
  userStakeTierCount: PromiseOrValue<BigNumberish>;
  userEarnedToken0Amount: PromiseOrValue<BigNumberish>;
  userEarnedToken1Amount: PromiseOrValue<BigNumberish>;
  userStakeTierSections: PromiseOrValue<BigNumberish>[];
};

export type TUserStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber[]
] & {
  staker: boolean;
  userChangeCountIndex: BigNumber;
  userTotalStakeAmount: BigNumber;
  userTotalScore: BigNumber;
  userStakeTierCount: BigNumber;
  userEarnedToken0Amount: BigNumber;
  userEarnedToken1Amount: BigNumber;
  userStakeTierSections: BigNumber[];
};

export type TStakeTierSectionStruct = {
  receivable: PromiseOrValue<boolean>;
  indexID: PromiseOrValue<BigNumberish>;
  enterTime: PromiseOrValue<BigNumberish>;
  exitTime: PromiseOrValue<BigNumberish>;
  stakeAmount: PromiseOrValue<BigNumberish>;
  userScore: PromiseOrValue<BigNumberish>;
  endTime: PromiseOrValue<BigNumberish>;
  tierMultipler: PromiseOrValue<BigNumberish>;
};

export type TStakeTierSectionStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  receivable: boolean;
  indexID: BigNumber;
  enterTime: BigNumber;
  exitTime: BigNumber;
  stakeAmount: BigNumber;
  userScore: BigNumber;
  endTime: BigNumber;
  tierMultipler: BigNumber;
};

export interface StakeInterface extends utils.Interface {
  functions: {
    "addToken0Liquidity(uint256)": FunctionFragment;
    "addToken1Liquidity(uint256)": FunctionFragment;
    "calculateRewards(address)": FunctionFragment;
    "calculateScore(uint256,uint256)": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "getBlacklist(address)": FunctionFragment;
    "getPoolInfo()": FunctionFragment;
    "getUserInfo(address)": FunctionFragment;
    "getUserStakeList(address)": FunctionFragment;
    "getUserStakePeriod(uint256,address)": FunctionFragment;
    "setBlacklist(bool,address)": FunctionFragment;
    "setPoolStatus(bool)": FunctionFragment;
    "stake(uint256,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawRequest(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addToken0Liquidity"
      | "addToken1Liquidity"
      | "calculateRewards"
      | "calculateScore"
      | "claimRewards"
      | "getBlacklist"
      | "getPoolInfo"
      | "getUserInfo"
      | "getUserStakeList"
      | "getUserStakePeriod"
      | "setBlacklist"
      | "setPoolStatus"
      | "stake"
      | "withdraw"
      | "withdrawRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToken0Liquidity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken1Liquidity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateScore",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlacklist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakeList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakePeriod",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlacklist",
    values: [PromiseOrValue<boolean>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolStatus",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToken0Liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToken1Liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakeList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequest",
    data: BytesLike
  ): Result;

  events: {
    "FORCED_HARVEST(address,address,uint256)": EventFragment;
    "HANDLE_ADD_LIQUIDITY(address,address,uint256)": EventFragment;
    "HANDLE_HARVEST(address,address,uint256)": EventFragment;
    "HANDLE_REQUEST(address,address,uint256)": EventFragment;
    "HANDLE_STAKE(address,address,uint256)": EventFragment;
    "HANDLE_UNSTAKE(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FORCED_HARVEST"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_ADD_LIQUIDITY"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_HARVEST"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_REQUEST"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_STAKE"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_UNSTAKE"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface FORCED_HARVESTEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type FORCED_HARVESTEvent = TypedEvent<
  [string, string, BigNumber],
  FORCED_HARVESTEventObject
>;

export type FORCED_HARVESTEventFilter = TypedEventFilter<FORCED_HARVESTEvent>;

export interface HANDLE_ADD_LIQUIDITYEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type HANDLE_ADD_LIQUIDITYEvent = TypedEvent<
  [string, string, BigNumber],
  HANDLE_ADD_LIQUIDITYEventObject
>;

export type HANDLE_ADD_LIQUIDITYEventFilter =
  TypedEventFilter<HANDLE_ADD_LIQUIDITYEvent>;

export interface HANDLE_HARVESTEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type HANDLE_HARVESTEvent = TypedEvent<
  [string, string, BigNumber],
  HANDLE_HARVESTEventObject
>;

export type HANDLE_HARVESTEventFilter = TypedEventFilter<HANDLE_HARVESTEvent>;

export interface HANDLE_REQUESTEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type HANDLE_REQUESTEvent = TypedEvent<
  [string, string, BigNumber],
  HANDLE_REQUESTEventObject
>;

export type HANDLE_REQUESTEventFilter = TypedEventFilter<HANDLE_REQUESTEvent>;

export interface HANDLE_STAKEEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type HANDLE_STAKEEvent = TypedEvent<
  [string, string, BigNumber],
  HANDLE_STAKEEventObject
>;

export type HANDLE_STAKEEventFilter = TypedEventFilter<HANDLE_STAKEEvent>;

export interface HANDLE_UNSTAKEEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type HANDLE_UNSTAKEEvent = TypedEvent<
  [string, string, BigNumber],
  HANDLE_UNSTAKEEventObject
>;

export type HANDLE_UNSTAKEEventFilter = TypedEventFilter<HANDLE_UNSTAKEEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Stake extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToken0Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToken1Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calculateScore(
      _amount: PromiseOrValue<BigNumberish>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { score: BigNumber; multipler: BigNumber }
    >;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBlacklist(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isBlacklist: boolean }>;

    getPoolInfo(
      overrides?: CallOverrides
    ): Promise<
      [TStakePoolInfoStructOutput] & { poolInfo: TStakePoolInfoStructOutput }
    >;

    getUserInfo(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[TUserStructOutput] & { userInfo: TUserStructOutput }>;

    getUserStakeList(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { stakeList: BigNumber[] }>;

    getUserStakePeriod(
      _index: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [TStakeTierSectionStructOutput] & {
        period: TStakeTierSectionStructOutput;
      }
    >;

    setBlacklist(
      _status: PromiseOrValue<boolean>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addToken0Liquidity(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToken1Liquidity(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateRewards(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  calculateScore(
    _amount: PromiseOrValue<BigNumberish>,
    _time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { score: BigNumber; multipler: BigNumber }
  >;

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBlacklist(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPoolInfo(overrides?: CallOverrides): Promise<TStakePoolInfoStructOutput>;

  getUserInfo(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<TUserStructOutput>;

  getUserStakeList(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserStakePeriod(
    _index: PromiseOrValue<BigNumberish>,
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<TStakeTierSectionStructOutput>;

  setBlacklist(
    _status: PromiseOrValue<boolean>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolStatus(
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amount: PromiseOrValue<BigNumberish>,
    _lockTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawRequest(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToken0Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken1Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calculateScore(
      _amount: PromiseOrValue<BigNumberish>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { score: BigNumber; multipler: BigNumber }
    >;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    getBlacklist(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPoolInfo(overrides?: CallOverrides): Promise<TStakePoolInfoStructOutput>;

    getUserInfo(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<TUserStructOutput>;

    getUserStakeList(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserStakePeriod(
      _index: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<TStakeTierSectionStructOutput>;

    setBlacklist(
      _status: PromiseOrValue<boolean>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FORCED_HARVEST(address,address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): FORCED_HARVESTEventFilter;
    FORCED_HARVEST(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): FORCED_HARVESTEventFilter;

    "HANDLE_ADD_LIQUIDITY(address,address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_ADD_LIQUIDITYEventFilter;
    HANDLE_ADD_LIQUIDITY(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_ADD_LIQUIDITYEventFilter;

    "HANDLE_HARVEST(address,address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_HARVESTEventFilter;
    HANDLE_HARVEST(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_HARVESTEventFilter;

    "HANDLE_REQUEST(address,address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_REQUESTEventFilter;
    HANDLE_REQUEST(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_REQUESTEventFilter;

    "HANDLE_STAKE(address,address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_STAKEEventFilter;
    HANDLE_STAKE(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_STAKEEventFilter;

    "HANDLE_UNSTAKE(address,address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_UNSTAKEEventFilter;
    HANDLE_UNSTAKE(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
      arg2?: null
    ): HANDLE_UNSTAKEEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addToken0Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToken1Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateScore(
      _amount: PromiseOrValue<BigNumberish>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBlacklist(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getUserInfo(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakeList(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakePeriod(
      _index: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBlacklist(
      _status: PromiseOrValue<boolean>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToken0Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToken1Liquidity(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateScore(
      _amount: PromiseOrValue<BigNumberish>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBlacklist(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserInfo(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakeList(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakePeriod(
      _index: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBlacklist(
      _status: PromiseOrValue<boolean>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
