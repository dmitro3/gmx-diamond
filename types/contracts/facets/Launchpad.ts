/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LaunchpadInterface extends utils.Interface {
  functions: {
    "calculateAllocation(uint256,address)": FunctionFragment;
    "calculateUnitQuantityTOKEN(uint256,uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "register(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateAllocation"
      | "calculateUnitQuantityTOKEN"
      | "deposit"
      | "register"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateAllocation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUnitQuantityTOKEN",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUnitQuantityTOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;

  events: {
    "HANDLE_DEPOSIT(address,uint256,uint256)": EventFragment;
    "HANDLE_REGISTER(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HANDLE_DEPOSIT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_REGISTER"): EventFragment;
}

export interface HANDLE_DEPOSITEventObject {
  arg0: string;
  arg1: BigNumber;
  arg2: BigNumber;
}
export type HANDLE_DEPOSITEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  HANDLE_DEPOSITEventObject
>;

export type HANDLE_DEPOSITEventFilter = TypedEventFilter<HANDLE_DEPOSITEvent>;

export interface HANDLE_REGISTEREventObject {
  arg0: string;
  arg1: BigNumber;
}
export type HANDLE_REGISTEREvent = TypedEvent<
  [string, BigNumber],
  HANDLE_REGISTEREventObject
>;

export type HANDLE_REGISTEREventFilter = TypedEventFilter<HANDLE_REGISTEREvent>;

export interface Launchpad extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LaunchpadInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateAllocation(
      _id: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { allocation: BigNumber }>;

    calculateUnitQuantityTOKEN(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { unitQuantity: BigNumber }>;

    deposit(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    register(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculateAllocation(
    _id: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateUnitQuantityTOKEN(
    _id: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    _id: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  register(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateAllocation(
      _id: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUnitQuantityTOKEN(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    register(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HANDLE_DEPOSIT(address,uint256,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: null,
      arg2?: null
    ): HANDLE_DEPOSITEventFilter;
    HANDLE_DEPOSIT(
      arg0?: PromiseOrValue<string> | null,
      arg1?: null,
      arg2?: null
    ): HANDLE_DEPOSITEventFilter;

    "HANDLE_REGISTER(address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: null
    ): HANDLE_REGISTEREventFilter;
    HANDLE_REGISTER(
      arg0?: PromiseOrValue<string> | null,
      arg1?: null
    ): HANDLE_REGISTEREventFilter;
  };

  estimateGas: {
    calculateAllocation(
      _id: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUnitQuantityTOKEN(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    register(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateAllocation(
      _id: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateUnitQuantityTOKEN(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    register(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
