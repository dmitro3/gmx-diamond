/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TVestingUserStruct = {
  isExist: PromiseOrValue<boolean>;
  userRefunded: PromiseOrValue<boolean>;
  userAllowedTokenID: PromiseOrValue<BigNumberish>;
  userRefundedAmount: PromiseOrValue<BigNumberish>;
  userWithdrawnAmount: PromiseOrValue<BigNumberish>;
  userReceivedAmount: PromiseOrValue<BigNumberish>;
  userAddress: PromiseOrValue<string>;
};

export type TVestingUserStructOutput = [
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  isExist: boolean;
  userRefunded: boolean;
  userAllowedTokenID: BigNumber;
  userRefundedAmount: BigNumber;
  userWithdrawnAmount: BigNumber;
  userReceivedAmount: BigNumber;
  userAddress: string;
};

export type TVestingStruct = {
  isRefundable: PromiseOrValue<boolean>;
  isRefund: PromiseOrValue<boolean>;
  tokenType: PromiseOrValue<BigNumberish>;
  projectID: PromiseOrValue<BigNumberish>;
  refundEndTime: PromiseOrValue<BigNumberish>;
  claimStartTime: PromiseOrValue<BigNumberish>;
  remainingTokens: PromiseOrValue<BigNumberish>;
  claimedTokens: PromiseOrValue<BigNumberish>;
  refundedAmount: PromiseOrValue<BigNumberish>;
  vestingPeriod: PromiseOrValue<BigNumberish>[];
  periodClaim: PromiseOrValue<BigNumberish>[];
  tokenAddress: PromiseOrValue<string>;
  refundedUsers: PromiseOrValue<string>[];
  userList: PromiseOrValue<string>[];
};

export type TVestingStructOutput = [
  boolean,
  boolean,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber[],
  BigNumber[],
  string,
  string[],
  string[]
] & {
  isRefundable: boolean;
  isRefund: boolean;
  tokenType: number;
  projectID: BigNumber;
  refundEndTime: BigNumber;
  claimStartTime: BigNumber;
  remainingTokens: BigNumber;
  claimedTokens: BigNumber;
  refundedAmount: BigNumber;
  vestingPeriod: BigNumber[];
  periodClaim: BigNumber[];
  tokenAddress: string;
  refundedUsers: string[];
  userList: string[];
};

export interface VestingInterface extends utils.Interface {
  functions: {
    "calculateClaim(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "getVesting()": FunctionFragment;
    "initUsers((bool,bool,uint256,uint256,uint256,uint256,address)[])": FunctionFragment;
    "initVesting((bool,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256[],address,address[],address[]))": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateClaim"
      | "claim"
      | "getUser"
      | "getVesting"
      | "initUsers"
      | "initVesting"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateClaim",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVesting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initUsers",
    values: [TVestingUserStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initVesting",
    values: [TVestingStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVesting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "HANDLE_CLAIM(address,uint256)": EventFragment;
    "HANDLE_INIT_VESTING(address,uint256)": EventFragment;
    "HANDLE_REFUND(address,uint256)": EventFragment;
    "HANDLE_SET_REFUND(address,uint256)": EventFragment;
    "HANDLE_WITHDRAWN_AMOUNT(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HANDLE_CLAIM"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_INIT_VESTING"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_REFUND"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_SET_REFUND"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HANDLE_WITHDRAWN_AMOUNT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface HANDLE_CLAIMEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type HANDLE_CLAIMEvent = TypedEvent<
  [string, BigNumber],
  HANDLE_CLAIMEventObject
>;

export type HANDLE_CLAIMEventFilter = TypedEventFilter<HANDLE_CLAIMEvent>;

export interface HANDLE_INIT_VESTINGEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type HANDLE_INIT_VESTINGEvent = TypedEvent<
  [string, BigNumber],
  HANDLE_INIT_VESTINGEventObject
>;

export type HANDLE_INIT_VESTINGEventFilter =
  TypedEventFilter<HANDLE_INIT_VESTINGEvent>;

export interface HANDLE_REFUNDEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type HANDLE_REFUNDEvent = TypedEvent<
  [string, BigNumber],
  HANDLE_REFUNDEventObject
>;

export type HANDLE_REFUNDEventFilter = TypedEventFilter<HANDLE_REFUNDEvent>;

export interface HANDLE_SET_REFUNDEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type HANDLE_SET_REFUNDEvent = TypedEvent<
  [string, BigNumber],
  HANDLE_SET_REFUNDEventObject
>;

export type HANDLE_SET_REFUNDEventFilter =
  TypedEventFilter<HANDLE_SET_REFUNDEvent>;

export interface HANDLE_WITHDRAWN_AMOUNTEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type HANDLE_WITHDRAWN_AMOUNTEvent = TypedEvent<
  [string, BigNumber],
  HANDLE_WITHDRAWN_AMOUNTEventObject
>;

export type HANDLE_WITHDRAWN_AMOUNTEventFilter =
  TypedEventFilter<HANDLE_WITHDRAWN_AMOUNTEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Vesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateClaim(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[TVestingUserStructOutput] & { user: TVestingUserStructOutput }>;

    getVesting(
      overrides?: CallOverrides
    ): Promise<[TVestingStructOutput] & { vesting: TVestingStructOutput }>;

    initUsers(
      _users: TVestingUserStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initVesting(
      _params: TVestingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculateClaim(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUser(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<TVestingUserStructOutput>;

  getVesting(overrides?: CallOverrides): Promise<TVestingStructOutput>;

  initUsers(
    _users: TVestingUserStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initVesting(
    _params: TVestingStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateClaim(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    getUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<TVestingUserStructOutput>;

    getVesting(overrides?: CallOverrides): Promise<TVestingStructOutput>;

    initUsers(
      _users: TVestingUserStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    initVesting(
      _params: TVestingStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HANDLE_CLAIM(address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<BigNumberish> | null
    ): HANDLE_CLAIMEventFilter;
    HANDLE_CLAIM(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<BigNumberish> | null
    ): HANDLE_CLAIMEventFilter;

    "HANDLE_INIT_VESTING(address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<BigNumberish> | null
    ): HANDLE_INIT_VESTINGEventFilter;
    HANDLE_INIT_VESTING(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<BigNumberish> | null
    ): HANDLE_INIT_VESTINGEventFilter;

    "HANDLE_REFUND(address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<BigNumberish> | null
    ): HANDLE_REFUNDEventFilter;
    HANDLE_REFUND(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<BigNumberish> | null
    ): HANDLE_REFUNDEventFilter;

    "HANDLE_SET_REFUND(address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<BigNumberish> | null
    ): HANDLE_SET_REFUNDEventFilter;
    HANDLE_SET_REFUND(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<BigNumberish> | null
    ): HANDLE_SET_REFUNDEventFilter;

    "HANDLE_WITHDRAWN_AMOUNT(address,uint256)"(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<BigNumberish> | null
    ): HANDLE_WITHDRAWN_AMOUNTEventFilter;
    HANDLE_WITHDRAWN_AMOUNT(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<BigNumberish> | null
    ): HANDLE_WITHDRAWN_AMOUNTEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    calculateClaim(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVesting(overrides?: CallOverrides): Promise<BigNumber>;

    initUsers(
      _users: TVestingUserStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initVesting(
      _params: TVestingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateClaim(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVesting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initUsers(
      _users: TVestingUserStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initVesting(
      _params: TVestingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
